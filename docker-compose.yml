version: '3.8'

services:
  db:
    env_file: ".env"
    image: postgres
    container_name: my-postgres
    networks:
      - my-network
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_HOST: ${DB_HOST}
    # depends_on:
    #   - 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  server:
    env_file: ".env"
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: my-server
    networks:
      - my-network
    ports:
      - "8085:8085"
    working_dir: /app
    volumes: # для копирования исп. файла из контейнера на хост
      - ./output/:/app/output
      - ./https:/app/https
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_HOST: ${DB_HOST}
      MASTER_KEY: ${MASTER_KEY}
    depends_on:
      db:
        condition: service_healthy
    command: sh -c 'cp ./server ./output/ && ./server'
  client:
    env_file: ".env"
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: my-client
    networks:
      - my-network
    ports:
      - "8080:8080"
    working_dir: /app
    volumes: # для копирования исп. файла из контейнера на хост
      - ./output/:/app/output
      - ./https:/app/https
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_HOST: ${DB_HOST}
      SERVER_ADDRESS: ${SERVER_ADDRESS}
    depends_on:
      server:
        condition: service_started
    command: sh -c 'cp ./client_linux ./output/ && cp ./client_win ./output/ && cp ./client_mac ./output/ && ls && ./client_linux'

networks:
  my-network:
    driver: bridge