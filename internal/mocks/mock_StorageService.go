// Code generated by MockGen. DO NOT EDIT.
// Source: gophkeeper/internal/storage (interfaces: StorageService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// CheckPasswordHash mocks base method.
func (m *MockStorageService) CheckPasswordHash(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *MockStorageServiceMockRecorder) CheckPasswordHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*MockStorageService)(nil).CheckPasswordHash), arg0, arg1)
}

// Close mocks base method.
func (m *MockStorageService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageService)(nil).Close))
}

// DeletePrivateData mocks base method.
func (m *MockStorageService) DeletePrivateData(arg0, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateData", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrivateData indicates an expected call of DeletePrivateData.
func (mr *MockStorageServiceMockRecorder) DeletePrivateData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateData", reflect.TypeOf((*MockStorageService)(nil).DeletePrivateData), arg0, arg1)
}

// GetHashedPasswordByLogin mocks base method.
func (m *MockStorageService) GetHashedPasswordByLogin(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashedPasswordByLogin", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHashedPasswordByLogin indicates an expected call of GetHashedPasswordByLogin.
func (mr *MockStorageServiceMockRecorder) GetHashedPasswordByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashedPasswordByLogin", reflect.TypeOf((*MockStorageService)(nil).GetHashedPasswordByLogin), arg0)
}

// GetPrivateData mocks base method.
func (m *MockStorageService) GetPrivateData(arg0, arg1 string) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateData", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetPrivateData indicates an expected call of GetPrivateData.
func (mr *MockStorageServiceMockRecorder) GetPrivateData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateData", reflect.TypeOf((*MockStorageService)(nil).GetPrivateData), arg0, arg1)
}

// GetTokenByUserID mocks base method.
func (m *MockStorageService) GetTokenByUserID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByUserID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByUserID indicates an expected call of GetTokenByUserID.
func (mr *MockStorageServiceMockRecorder) GetTokenByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByUserID", reflect.TypeOf((*MockStorageService)(nil).GetTokenByUserID), arg0)
}

// GetUserIDByLogin mocks base method.
func (m *MockStorageService) GetUserIDByLogin(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByLogin", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByLogin indicates an expected call of GetUserIDByLogin.
func (mr *MockStorageServiceMockRecorder) GetUserIDByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByLogin", reflect.TypeOf((*MockStorageService)(nil).GetUserIDByLogin), arg0)
}

// HashPassword mocks base method.
func (m *MockStorageService) HashPassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockStorageServiceMockRecorder) HashPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockStorageService)(nil).HashPassword), arg0)
}

// ListPrivateData mocks base method.
func (m *MockStorageService) ListPrivateData(arg0 string) (map[string]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrivateData", arg0)
	ret0, _ := ret[0].(map[string]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrivateData indicates an expected call of ListPrivateData.
func (mr *MockStorageServiceMockRecorder) ListPrivateData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivateData", reflect.TypeOf((*MockStorageService)(nil).ListPrivateData), arg0)
}

// MasterKeyRotation mocks base method.
func (m *MockStorageService) MasterKeyRotation() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MasterKeyRotation")
}

// MasterKeyRotation indicates an expected call of MasterKeyRotation.
func (mr *MockStorageServiceMockRecorder) MasterKeyRotation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MasterKeyRotation", reflect.TypeOf((*MockStorageService)(nil).MasterKeyRotation))
}

// PingHandler mocks base method.
func (m *MockStorageService) PingHandler() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingHandler")
	ret0, _ := ret[0].(error)
	return ret0
}

// PingHandler indicates an expected call of PingHandler.
func (mr *MockStorageServiceMockRecorder) PingHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingHandler", reflect.TypeOf((*MockStorageService)(nil).PingHandler))
}

// SaveLoginPassword mocks base method.
func (m *MockStorageService) SaveLoginPassword(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLoginPassword", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SaveLoginPassword indicates an expected call of SaveLoginPassword.
func (mr *MockStorageServiceMockRecorder) SaveLoginPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLoginPassword", reflect.TypeOf((*MockStorageService)(nil).SaveLoginPassword), arg0, arg1)
}

// SavePrivateData mocks base method.
func (m *MockStorageService) SavePrivateData(arg0, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePrivateData", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePrivateData indicates an expected call of SavePrivateData.
func (mr *MockStorageServiceMockRecorder) SavePrivateData(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePrivateData", reflect.TypeOf((*MockStorageService)(nil).SavePrivateData), arg0, arg1, arg2, arg3, arg4)
}

// SaveToken mocks base method.
func (m *MockStorageService) SaveToken(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveToken indicates an expected call of SaveToken.
func (mr *MockStorageServiceMockRecorder) SaveToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToken", reflect.TypeOf((*MockStorageService)(nil).SaveToken), arg0, arg1)
}

// SaveUID mocks base method.
func (m *MockStorageService) SaveUID(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUID indicates an expected call of SaveUID.
func (mr *MockStorageServiceMockRecorder) SaveUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUID", reflect.TypeOf((*MockStorageService)(nil).SaveUID), arg0, arg1)
}
